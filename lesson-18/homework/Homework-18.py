{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "ffcf3690",
   "metadata": {},
   "source": [
    "# 1. \n",
    "df = pd.read_csv('task\\\\stackoverflow_qa.csv')\n",
    "\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c03de254",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load the StackOverflow dataset\n",
    "df = pd.read_csv(\"stackoverflow_qa.csv\")\n",
    "\n",
    "# Convert the 'creationdate' column to datetime\n",
    "df['creationdate'] = pd.to_datetime(df['creationdate'])\n",
    "\n",
    "# 1. Find all questions that were created before 2014\n",
    "before_2014 = df[df['creationdate'] < \"2014-01-01\"]\n",
    "\n",
    "# 2. Find all questions with a score more than 50\n",
    "score_above_50 = df[df['score'] > 50]\n",
    "\n",
    "# 3. Find all questions with a score between 50 and 100\n",
    "score_between_50_100 = df[df['score'].between(50, 100)]\n",
    "\n",
    "# 4. Find all questions answered by Scott Boston\n",
    "answered_by_scott = df[df['ans_name'] == 'Scott Boston']\n",
    "\n",
    "# 5. Find all questions answered by the following 5 users\n",
    "five_users = ['Unutbu', 'Scott Boston', 'Mike Pennington', 'unutbu', 'Demitri']\n",
    "answered_by_five = df[df['ans_name'].isin(five_users)]\n",
    "\n",
    "# 6. Find all questions created between March 2014 and October 2014, answered by Unutbu, and score < 5\n",
    "march_to_oct_2014 = df[\n",
    "    (df['creationdate'] >= \"2014-03-01\") &\n",
    "    (df['creationdate'] <= \"2014-10-31\") &\n",
    "    (df['ans_name'] == 'Unutbu') &\n",
    "    (df['score'] < 5)\n",
    "]\n",
    "\n",
    "# 7. Find all questions that have score between 5 and 10 OR view count > 10,000\n",
    "score_5_10_or_viewcount_gt_10000 = df[\n",
    "    (df['score'].between(5, 10)) |\n",
    "    (df['viewcount'] > 10000)\n",
    "]\n",
    "\n",
    "# 8. Find all questions that are not answered by Scott Boston\n",
    "not_by_scott = df[df['ans_name'] != 'Scott Boston']\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f36645c4",
   "metadata": {},
   "source": [
    "# 2. Titanic data set, stored as CSV. The data consists of the following data columns:\n",
    "titanic_df = pd.read_csv(\"task\\\\titanic.csv\")\n",
    "\n",
    "titanic_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aecd4411",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load the Titanic dataset\n",
    "titanic_df = pd.read_csv(\"titanic.csv\")\n",
    "\n",
    "# 1. Female passengers in Class 1 with ages between 20 and 30\n",
    "female_class1_age20_30 = titanic_df[\n",
    "    (titanic_df['Sex'] == 'female') &\n",
    "    (titanic_df['Pclass'] == 1) &\n",
    "    (titanic_df['Age'].between(20, 30))\n",
    "]\n",
    "\n",
    "# 2. Passengers who paid more than $100\n",
    "fare_above_100 = titanic_df[titanic_df['Fare'] > 100]\n",
    "\n",
    "# 3. Passengers who survived and were alone\n",
    "survived_alone = titanic_df[\n",
    "    (titanic_df['Survived'] == 1) &\n",
    "    (titanic_df['SibSp'] == 0) &\n",
    "    (titanic_df['Parch'] == 0)\n",
    "]\n",
    "\n",
    "# 4. Embarked from 'C' and paid more than $50\n",
    "embarked_c_fare_gt_50 = titanic_df[\n",
    "    (titanic_df['Embarked'] == 'C') &\n",
    "    (titanic_df['Fare'] > 50)\n",
    "]\n",
    "\n",
    "# 5. Had both siblings/spouses and parents/children aboard\n",
    "has_sibsp_and_parch = titanic_df[\n",
    "    (titanic_df['SibSp'] > 0) &\n",
    "    (titanic_df['Parch'] > 0)\n",
    "]\n",
    "\n",
    "# 6. Aged 15 or younger who didnâ€™t survive\n",
    "under15_did_not_survive = titanic_df[\n",
    "    (titanic_df['Age'] <= 15) &\n",
    "    (titanic_df['Survived'] == 0)\n",
    "]\n",
    "\n",
    "# 7. Known cabin and fare > $200\n",
    "known_cabin_fare_gt_200 = titanic_df[\n",
    "    (titanic_df['Cabin'].notna()) &\n",
    "    (titanic_df['Fare'] > 200)\n",
    "]\n",
    "\n",
    "# 8. Odd-numbered PassengerId\n",
    "odd_passenger_ids = titanic_df[titanic_df['PassengerId'] % 2 == 1]\n",
    "\n",
    "# 9. Unique ticket numbers\n",
    "unique_ticket_numbers = titanic_df[\n",
    "    titanic_df['Ticket'].duplicated(keep=False) == False\n",
    "]\n",
    "\n",
    "# 10. 'Miss' in name and in Class 1\n",
    "miss_in_name_class1 = titanic_df[\n",
    "    (titanic_df['Name'].str.contains('Miss')) &\n",
    "    (titanic_df['Pclass'] == 1)\n",
    "]\n"
   ]
  }
 ],
 "metadata": {
  "language_info": {
   "name": "python"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
