{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "4c6f52e6",
   "metadata": {},
   "source": [
    "# Homework Projects:"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "59fcc2ea",
   "metadata": {},
   "source": [
    "## Homework 1. ToDo List Application"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "00b39656",
   "metadata": {},
   "outputs": [],
   "source": [
    "from datetime import datetime\n",
    "\n",
    "class Task:\n",
    "    def __init__(self, title, description, due_date):\n",
    "        self.title = title\n",
    "        self.description = description\n",
    "        self.due_date = due_date\n",
    "        self.completed = False\n",
    "\n",
    "    def mark_complete(self):\n",
    "        self.completed = True\n",
    "\n",
    "    def __str__(self):\n",
    "        status = \"✅\" if self.completed else \"❌\"\n",
    "        return f\"{self.title} - {self.description} - Due: {self.due_date} - Status: {status}\"\n",
    "\n",
    "class ToDoList:\n",
    "    def __init__(self):\n",
    "        self.tasks = []\n",
    "\n",
    "    def add_task(self, task):\n",
    "        self.tasks.append(task)\n",
    "\n",
    "    def mark_task_complete(self, index):\n",
    "        if 0 <= index < len(self.tasks):\n",
    "            self.tasks[index].mark_complete()\n",
    "\n",
    "    def list_all_tasks(self):\n",
    "        for i, task in enumerate(self.tasks):\n",
    "            print(f\"{i}. {task}\")\n",
    "\n",
    "    def list_incomplete_tasks(self):\n",
    "        for i, task in enumerate(self.tasks):\n",
    "            if not task.completed:\n",
    "                print(f\"{i}. {task}\")\n",
    "\n",
    "# --- CLI Interface ---\n",
    "def run_todo_app():\n",
    "    todo = ToDoList()\n",
    "    while True:\n",
    "        print(\"\\nToDo Menu:\\n1. Add Task\\n2. Mark Task Complete\\n3. List All Tasks\\n4. Incomplete Tasks\\n5. Exit\")\n",
    "        choice = input(\"Choose: \")\n",
    "        if choice == \"1\":\n",
    "            title = input(\"Title: \")\n",
    "            desc = input(\"Description: \")\n",
    "            date = input(\"Due Date (YYYY-MM-DD): \")\n",
    "            todo.add_task(Task(title, desc, date))\n",
    "        elif choice == \"2\":\n",
    "            todo.list_all_tasks()\n",
    "            index = int(input(\"Enter task index to complete: \"))\n",
    "            todo.mark_task_complete(index)\n",
    "        elif choice == \"3\":\n",
    "            todo.list_all_tasks()\n",
    "        elif choice == \"4\":\n",
    "            todo.list_incomplete_tasks()\n",
    "        elif choice == \"5\":\n",
    "            break\n",
    "\n",
    "# run_todo_app()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c64d0398",
   "metadata": {},
   "source": [
    "## Homework 2. Simple Blog System"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c48689ab",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Post:\n",
    "    def __init__(self, title, content, author):\n",
    "        self.title = title\n",
    "        self.content = content\n",
    "        self.author = author\n",
    "\n",
    "    def __str__(self):\n",
    "        return f\"Title: {self.title}\\nAuthor: {self.author}\\nContent: {self.content}\"\n",
    "\n",
    "class Blog:\n",
    "    def __init__(self):\n",
    "        self.posts = []\n",
    "\n",
    "    def add_post(self, post):\n",
    "        self.posts.append(post)\n",
    "\n",
    "    def list_posts(self):\n",
    "        for i, post in enumerate(self.posts):\n",
    "            print(f\"\\nPost {i}:\\n{post}\")\n",
    "\n",
    "    def posts_by_author(self, author):\n",
    "        for post in self.posts:\n",
    "            if post.author == author:\n",
    "                print(post)\n",
    "\n",
    "    def delete_post(self, index):\n",
    "        if 0 <= index < len(self.posts):\n",
    "            del self.posts[index]\n",
    "\n",
    "    def edit_post(self, index, new_title, new_content):\n",
    "        if 0 <= index < len(self.posts):\n",
    "            self.posts[index].title = new_title\n",
    "            self.posts[index].content = new_content\n",
    "\n",
    "    def latest_post(self):\n",
    "        if self.posts:\n",
    "            print(\"\\nLatest Post:\\n\", self.posts[-1])\n",
    "\n",
    "# --- CLI Interface ---\n",
    "def run_blog_app():\n",
    "    blog = Blog()\n",
    "    while True:\n",
    "        print(\"\\nBlog Menu:\\n1. Add Post\\n2. List Posts\\n3. Search by Author\\n4. Edit Post\\n5. Delete Post\\n6. Latest Post\\n7. Exit\")\n",
    "        choice = input(\"Choose: \")\n",
    "        if choice == \"1\":\n",
    "            title = input(\"Title: \")\n",
    "            content = input(\"Content: \")\n",
    "            author = input(\"Author: \")\n",
    "            blog.add_post(Post(title, content, author))\n",
    "        elif choice == \"2\":\n",
    "            blog.list_posts()\n",
    "        elif choice == \"3\":\n",
    "            author = input(\"Author name: \")\n",
    "            blog.posts_by_author(author)\n",
    "        elif choice == \"4\":\n",
    "            blog.list_posts()\n",
    "            idx = int(input(\"Post index to edit: \"))\n",
    "            new_title = input(\"New Title: \")\n",
    "            new_content = input(\"New Content: \")\n",
    "            blog.edit_post(idx, new_title, new_content)\n",
    "        elif choice == \"5\":\n",
    "            blog.list_posts()\n",
    "            idx = int(input(\"Post index to delete: \"))\n",
    "            blog.delete_post(idx)\n",
    "        elif choice == \"6\":\n",
    "            blog.latest_post()\n",
    "        elif choice == \"7\":\n",
    "            break\n",
    "\n",
    "# run_blog_app()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "117ff54d",
   "metadata": {},
   "source": [
    "## Homework 3. Simple Banking System"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0e5ed4fb",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Account:\n",
    "    def __init__(self, acc_number, holder, balance=0):\n",
    "        self.acc_number = acc_number\n",
    "        self.holder = holder\n",
    "        self.balance = balance\n",
    "\n",
    "    def deposit(self, amount):\n",
    "        self.balance += amount\n",
    "\n",
    "    def withdraw(self, amount):\n",
    "        if amount > self.balance:\n",
    "            print(\"Insufficient balance!\")\n",
    "            return False\n",
    "        self.balance -= amount\n",
    "        return True\n",
    "\n",
    "    def transfer(self, target_account, amount):\n",
    "        if self.withdraw(amount):\n",
    "            target_account.deposit(amount)\n",
    "            print(\"Transfer successful!\")\n",
    "\n",
    "    def __str__(self):\n",
    "        return f\"Account Number: {self.acc_number}\\nHolder: {self.holder}\\nBalance: {self.balance}\"\n",
    "\n",
    "class Bank:\n",
    "    def __init__(self):\n",
    "        self.accounts = {}\n",
    "\n",
    "    def add_account(self, acc):\n",
    "        self.accounts[acc.acc_number] = acc\n",
    "\n",
    "    def get_account(self, acc_number):\n",
    "        return self.accounts.get(acc_number)\n",
    "\n",
    "# --- CLI Interface ---\n",
    "def run_bank_app():\n",
    "    bank = Bank()\n",
    "    while True:\n",
    "        print(\"\\nBank Menu:\\n1. Add Account\\n2. Deposit\\n3. Withdraw\\n4. Transfer\\n5. Account Details\\n6. Exit\")\n",
    "        choice = input(\"Choose: \")\n",
    "        if choice == \"1\":\n",
    "            acc_no = input(\"Account Number: \")\n",
    "            name = input(\"Account Holder Name: \")\n",
    "            bank.add_account(Account(acc_no, name))\n",
    "        elif choice == \"2\":\n",
    "            acc_no = input(\"Account Number: \")\n",
    "            acc = bank.get_account(acc_no)\n",
    "            if acc:\n",
    "                amt = float(input(\"Amount: \"))\n",
    "                acc.deposit(amt)\n",
    "            else:\n",
    "                print(\"Account not found!\")\n",
    "        elif choice == \"3\":\n",
    "            acc_no = input(\"Account Number: \")\n",
    "            acc = bank.get_account(acc_no)\n",
    "            if acc:\n",
    "                amt = float(input(\"Amount: \"))\n",
    "                acc.withdraw(amt)\n",
    "            else:\n",
    "                print(\"Account not found!\")\n",
    "        elif choice == \"4\":\n",
    "            from_acc = input(\"From Account: \")\n",
    "            to_acc = input(\"To Account: \")\n",
    "            amt = float(input(\"Amount: \"))\n",
    "            acc1 = bank.get_account(from_acc)\n",
    "            acc2 = bank.get_account(to_acc)\n",
    "            if acc1 and acc2:\n",
    "                acc1.transfer(acc2, amt)\n",
    "            else:\n",
    "                print(\"One of the accounts not found.\")\n",
    "        elif choice == \"5\":\n",
    "            acc_no = input(\"Account Number: \")\n",
    "            acc = bank.get_account(acc_no)\n",
    "            if acc:\n",
    "                print(acc)\n",
    "            else:\n",
    "                print(\"Account not found.\")\n",
    "        elif choice == \"6\":\n",
    "            break\n",
    "\n",
    "# run_bank_app()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
