{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "8040a548",
   "metadata": {},
   "source": [
    "# 1. Homework Assignment 1: Analyzing Sales Data\n",
    "\n",
    "You are given a dataset containing sales data for an e-commerce website. The dataset (task\\sales_data.csv) has the following columns:\n",
    "\n",
    "Date: Date of the sale.\n",
    "\n",
    "Product: Name of the product sold.\n",
    "\n",
    "Category: Category to which the product belongs.\n",
    "\n",
    "Quantity: Number of units sold.\n",
    "\n",
    "Price: Price per unit.\n",
    "\n",
    "Tasks:\n",
    "\n",
    "1. Group the data by the Category column and calculate the following aggregate statistics for each category:\n",
    "\n",
    "Total quantity sold.\n",
    "\n",
    "Average price per unit.\n",
    "\n",
    "Maximum quantity sold in a single transaction.\n",
    "\n",
    "2. Identify the top-selling product in each category based on the total quantity sold.\n",
    "\n",
    "3. Find the date on which the highest total sales (quantity * price) occurred."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "51ceb136",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load sales data\n",
    "sales_df = pd.read_csv(\"task/sales_data.csv\")\n",
    "\n",
    "# Task 1: Group by Category and calculate required metrics\n",
    "category_stats = sales_df.groupby(\"Category\").agg(\n",
    "    total_quantity=(\"Quantity\", \"sum\"),\n",
    "    avg_price=(\"Price\", \"mean\"),\n",
    "    max_quantity=(\"Quantity\", \"max\")\n",
    ")\n",
    "\n",
    "print(\"Category-wise Statistics:\\n\", category_stats)\n",
    "\n",
    "# Task 2: Identify top-selling product in each category\n",
    "top_products = sales_df.groupby([\"Category\", \"Product\"])[\"Quantity\"].sum().reset_index()\n",
    "top_products = top_products.loc[top_products.groupby(\"Category\")[\"Quantity\"].idxmax()]\n",
    "\n",
    "print(\"Top-selling Products:\\n\", top_products)\n",
    "\n",
    "# Task 3: Find the highest total sales day\n",
    "sales_df[\"Total Sales\"] = sales_df[\"Quantity\"] * sales_df[\"Price\"]\n",
    "highest_sales_day = sales_df.groupby(\"Date\")[\"Total Sales\"].sum().idxmax()\n",
    "\n",
    "print(\"Date with highest total sales:\", highest_sales_day)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ceb98ac5",
   "metadata": {},
   "source": [
    "# 2. Homework Assignment 2: Examining Customer Orders\n",
    "\n",
    "You have a dataset (task\\customer_orders.csv) containing information about customer orders. The dataset has the following columns:\n",
    "\n",
    "OrderID: Unique identifier for each order.\n",
    "\n",
    "CustomerID: Unique identifier for each customer.\n",
    "\n",
    "Product: Name of the product ordered.\n",
    "\n",
    "Quantity: Number of units ordered.\n",
    "\n",
    "Price: Price per unit.\n",
    "\n",
    "Tasks:\n",
    "\n",
    "1. Group the data by CustomerID and filter out customers who have made less than 20 orders.\n",
    "\n",
    "2. Identify customers who have ordered products with an average price per unit greater than $120.\n",
    "\n",
    "3. Find the total quantity and total price for each product ordered, and filter out products that have a total quantity less than 5 units."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dd081073",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load customer orders data\n",
    "customer_df = pd.read_csv(\"task/customer_orders.csv\")\n",
    "\n",
    "# Task 1: Filter customers with at least 20 orders\n",
    "customer_order_counts = customer_df[\"CustomerID\"].value_counts()\n",
    "filtered_customers = customer_order_counts[customer_order_counts >= 20].index\n",
    "filtered_df = customer_df[customer_df[\"CustomerID\"].isin(filtered_customers)]\n",
    "\n",
    "print(\"Customers with at least 20 orders:\\n\", filtered_df)\n",
    "\n",
    "# Task 2: Find customers who ordered products with an avg price > $120\n",
    "customer_avg_price = customer_df.groupby(\"CustomerID\")[\"Price\"].mean()\n",
    "high_price_customers = customer_avg_price[customer_avg_price > 120]\n",
    "\n",
    "print(\"Customers who ordered expensive products:\\n\", high_price_customers)\n",
    "\n",
    "# Task 3: Calculate total quantity and price per product, filter those below 5 units\n",
    "product_totals = customer_df.groupby(\"Product\").agg(\n",
    "    total_quantity=(\"Quantity\", \"sum\"),\n",
    "    total_price=(\"Price\", \"sum\")\n",
    ")\n",
    "filtered_products = product_totals[product_totals[\"total_quantity\"] >= 5]\n",
    "\n",
    "print(\"Products with total quantity >= 5:\\n\", filtered_products)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "af9e387a",
   "metadata": {},
   "source": [
    "# 3. Homework Assignment 3: Population Salary Analysis\n",
    "\n",
    "1. \"task\\population.db\" sqlite database has population table.\n",
    "\n",
    "2. \"task\\population salary analysis.xlsx\" file defines Salary Band categories.\n",
    "\n",
    "Read the data from population table and calculate following measures:\n",
    "\n",
    "Percentage of population for each salary category;\n",
    "\n",
    "Average salary in each salary category;\n",
    "\n",
    "Median salary in each salary category;\n",
    "\n",
    "Number of population in each salary category;\n",
    "\n",
    "3. Calculate the same measures in each State"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b0ec4516",
   "metadata": {},
   "outputs": [],
   "source": [
    "import sqlite3\n",
    "\n",
    "# Connect to SQLite database\n",
    "conn = sqlite3.connect(\"task/population.db\")\n",
    "\n",
    "# Read population data\n",
    "population_df = pd.read_sql(\"SELECT * FROM population\", conn)\n",
    "\n",
    "# Task 1: Calculate salary category metrics\n",
    "salary_stats = population_df.groupby(\"Salary_Category\").agg(\n",
    "    percentage=(\"Population\", lambda x: x / x.sum() * 100),\n",
    "    average_salary=(\"Salary\", \"mean\"),\n",
    "    median_salary=(\"Salary\", \"median\"),\n",
    "    population_count=(\"Population\", \"sum\")\n",
    ")\n",
    "\n",
    "print(\"Salary category statistics:\\n\", salary_stats)\n",
    "\n",
    "# Task 2: Calculate same measures per State\n",
    "state_stats = population_df.groupby(\"State\").agg(\n",
    "    percentage=(\"Population\", lambda x: x / x.sum() * 100),\n",
    "    average_salary=(\"Salary\", \"mean\"),\n",
    "    median_salary=(\"Salary\", \"median\"),\n",
    "    population_count=(\"Population\", \"sum\")\n",
    ")\n",
    "\n",
    "print(\"State-wise statistics:\\n\", state_stats)\n",
    "\n",
    "conn.close()"
   ]
  }
 ],
 "metadata": {
  "language_info": {
   "name": "python"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
